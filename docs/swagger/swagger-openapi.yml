openapi: 3.0.3
info:
  title: SNUGGLY THE CROW
  description: API for SnugglyThe Crow Application
  version: v1
servers:
  - url: http://localhost:7010
tags:
  - name: WELCOME / MONITOR
  - name: AUTH
  - name: USER
  - name: BLOG
paths:
  /v1/auth/login:
    post:
      tags:
        - AUTH
      summary: AUTHENTICATION - LOGIN
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/StoreOrLoginUserRequest'
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuthenticatedUser'
        '400':
          description: Error - Bad credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400_BadCredentials'
  /v1/users/:
    post:
      tags:
        - USER
      summary: STORE USER
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/StoreOrLoginUserRequest'
      security:
        - apikeyAuth: []
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuthenticatedUser'
        '400':
          description: Error - User already exist
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/400_UserAlreadyExist'
  /v1/users:
    get:
      tags:
        - USER
      summary: GET ALL USERS
      security:
        - apikeyAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
  /v1/users/{user}:
    delete:
      tags:
        - USER
      summary: DELETE USER
      security:
        - apikeyAuth: []
      parameters:
        - name: user
          in: path
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Successful response
  /v1/articles:
    post:
      tags:
        - BLOG
      summary: STORE ARTICLE
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/StoreOrUpdateArticleRequest'
      security:
        - apikeyAuth: []
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Article'
    get:
      tags:
        - BLOG
      summary: GET ALL ARTICLES
      security:
        - apikeyAuth: []
      parameters:
        - name: perPage
          in: query
          schema:
            type: integer
          example: '10'
        - name: status
          in: query
          schema:
            type: string
          example: draft
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/PaginatedArticles'

  /v1/articles/{article}:
    put:
      tags:
        - BLOG
      summary: UPDATE ARTICLE
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/StoreOrUpdateArticleRequest'
      security:
        - apikeyAuth: []
      parameters:
        - name: article
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - BLOG
      summary: GET ONE ARTICLE
      security:
        - apikeyAuth: []
      parameters:
        - name: article
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - BLOG
      summary: DESTROY ARTICLE
      security:
        - apikeyAuth: []
      parameters:
        - name: article
          in: path
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Successful response
          content:
            application/json: {}
  /v1/articles/{article}/publish:
    patch:
      tags:
        - BLOG
      summary: SET ARTICLE AS PUBLISHED
      requestBody:
        content: {}
      security:
        - apikeyAuth: []
      parameters:
        - name: article
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/articles/{articles}/draft:
    patch:
      tags:
        - BLOG
      summary: SET ARTICLE AS DRAFT
      requestBody:
        content: {}
      security:
        - apikeyAuth: []
      parameters:
        - name: articles
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/articles/trashed:
    get:
      tags:
        - BLOG
      summary: GET ALL TRASHED ARTICLES
      security:
        - apikeyAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /:
    get:
      tags:
        - WELCOME / MONITOR
      summary: MONITORING PAGE
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
components:
  securitySchemes:
    apikeyAuth:
      type: http
      scheme: apikey
    noauthAuth:
      type: http
      scheme: noauth
  schemas:

    Article:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          minimum : 3
          maximum : 128
        content:
          type: string
        status:
          type: string
          format: enum [draft, published]
        published_at:
          type: string
          pattern: "Y-m-dTH:i:sP"
          example: 2023-12-25T00:00:00+01:00
        author:
          type: object
          items:
            $ref: '#/components/schemas/Author'
    TrashedArticle:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          minimum : 3
          maximum : 128
        content:
          type: string
        status:
          type: string
          format: enum [draft, published]
        published_at:
          type: string
          pattern: "Y-m-dTH:i:sP"
          example: 2023-12-25T00:00:00+01:00
        created_at:
          type: string
          pattern: "Y-m-dTH:i:sP"
          example: 2023-12-25T00:00:00+01:00
        updated_at:
          type: string
          pattern: "Y-m-dTH:i:sP"
          example: 2023-12-25T00:00:00+01:00
        deleted_at:
          type: string
          pattern: "Y-m-dTH:i:sP"
          example: 2023-12-25T00:00:00+01:00
        author:
          type: object
          items:
            $ref: '#/components/schemas/Author'
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
          minimum : 3
          maximum : 32
        last_login:
          type: string
          pattern: "Y-m-dTH:i:sP"
          example: 2023-12-25T00:00:00+01:00
        created_at:
          type: string
          pattern: "Y-m-dTH:i:sP"
          example: 2023-12-25T00:00:00+01:00
    AuthenticatedUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
          minimum : 3
          maximum : 32
        last_login:
          type: string
          pattern: "Y-m-dTH:i:sP"
          example: 2023-12-25T00:00:00+01:00
        api_key:
          type: string
          format: uuid
        api_key_expire_at:
          type: string
          pattern: "Y-m-dTH:i:sP"
          example: 2023-12-25T00:00:00+01:00
        created_at:
          type: string
          pattern: "Y-m-dTH:i:sP"
          example: 2023-12-25T00:00:00+01:00
    Author:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
          minimum : 3
          maximum : 32
    PaginatedArticles:
      required:
        - data
        - links
        - meta
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Article'
        links:
          $ref: '#/components/schemas/Links'
        meta:
          $ref: '#/components/schemas/Meta'
      description: Liste des articles pagin√©s
    Links:
      required:
        - first
      type: object
      properties:
        first:
          type: string
        last:
          type: string
        next:
          type: string
        prev:
          type: string
      description: Liens li√©s √† la pagination
    Meta:
      required:
        - current_page
      type: object
      properties:
        current_page:
          type: integer
          format: int32
        from:
          type: integer
          format: int32
        path:
          type: string
        per_page:
          type: integer
          format: int32
        to:
          type: integer
          format: int32
      description: M√©ta-data li√©es √† la pagination
    400_ValidationError:
      required:
        - invalid-params
        - status
        - title
        - type
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        status:
          type: integer
          format: int32
        invalid-params:
          type: array
          items:
            $ref: '#/components/schemas/InvalidParams'
      description: Your request parameters didn't validate.
    InvalidParams:
      required:
        - name
      type: object
      properties:
        name:
          type: string
        reason:
          type: string
      description: Invalid params list.
    404_ResourceNotFound:
      required:
        - detail
        - status
        - title
        - type
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        status:
          type: integer
          format: int32
        detail:
          type: string
      description: The resource you looking for can't be found.
    400_BadCredentials:
      required:
        - detail
        - status
        - title
        - type
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        status:
          type: integer
          format: int32
        detail:
          type: string
      description: Login failed because bad user credentials.
    400_ArticleCannotBePublishedBecauseAlreadyPublished:
      required:
        - detail
        - status
        - title
        - type
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        status:
          type: integer
          format: int32
        detail:
          type: string
      description: Article  can not be updated because its status is published
    400_ArticleAlreadyDraft:
      required:
        - detail
        - status
        - title
        - type
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        status:
          type: integer
          format: int32
        detail:
          type: string
      description: Article can not be set as draft because its already a draft
    400_ArticleAlreadyPublished:
      required:
        - detail
        - status
        - title
        - type
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        status:
          type: integer
          format: int32
        detail:
          type: string
      description: Article can not be published because its already published
    400_UserAlreadyExist:
      required:
        - detail
        - status
        - title
        - type
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        status:
          type: integer
          format: int32
        detail:
          type: string
      description: Cannot create user because username already exist in system
    401_Unauthenticated:
      required:
        - detail
        - status
        - title
        - type
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        status:
          type: integer
          format: int32
        detail:
          type: string
      description: Current user cannot be authenticated
    StoreOrUpdateArticleRequest:
      type: object
      properties:
        title:
          type: string
          minimum : 3
          maximum : 128
        content:
          type: string
        status:
          type: string
          format: enum [draft, published]
        published_at:
          type: string
          pattern: "Y-m-dTH:i:sP"
          example: 2023-12-25T00:00:00+01:00
    StoreOrLoginUserRequest:
      type: object
      properties:
        username:
          type: string
          minimum : 3
          maximum : 32
        password:
          type: string
          minimum : 6
          maximum : 64
